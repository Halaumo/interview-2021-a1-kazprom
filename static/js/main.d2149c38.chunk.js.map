{"version":3,"sources":["pages/styles.ts","store/users/actions.ts","components/user.tsx","store/notistack/actions.ts","store/notistack/notifier.tsx","app-routes.tsx","pages/index.tsx","App.tsx","store/users/reducers.ts","store/notistack/reducer.ts","store/users/saga.ts","store/sagas.ts","store/redux.ts","index.tsx"],"names":["Row","styled","div","Padding","RowButtonPadding","USERS_ADD_ONE","USERS_SET_CHECKED","USERS_DELETE_CHECKED","usersAddOne","payload","type","USERS_GET_ONE","usersGetOne","User","Name","p","UserComponent","checked","name","checkboxHandler","Checkbox","onClick","NOTISTACk_PUSH","NOTISTACk_REMOVE","NOTISTACk_REMOVE_FIRST","notistackPush","Notifier","dispatch","useDispatch","notifications","useSelector","store","notistack","useSnackbar","enqueueSnackbar","closeSnackbar","useEffect","message","key","variant","autoHideDuration","onClose","e","onExitedKey","routes","basepath","Component","users","state","checkedUsers","setUserChecked","usersSetChecked","deleteCheckedUsers","useState","isAddDialog","setIsAddDialog","inputValue","setInputValue","addUser","user","id","Date","now","toString","closeAddFormDialog","isDeleteDialog","setIsDeleteDialog","closeDeleteFormDialog","Button","color","disabled","Dialog","open","onEscapeKeyDown","DialogTitle","DialogContent","TextField","autoFocus","fullWidth","onChange","target","value","onKeyPress","DialogActions","map","App","path","basename","defaultState","usersGetOneWorker","usersWatcher","apiGetOneUser","fetch","method","headers","body","JSON","stringify","query","variables","action","call","data","Promise","resolve","json","parsed","Math","floor","random","all","put","takeLeading","rootWatcher","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","filter","note","index","createStore","composeWithDevTools","applyMiddleware","run","history","createBrowserHistory","ReactDOM","render","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.d2149c38.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const Padding = styled.div`\r\n  padding: 15px;\r\n`\r\n\r\nexport const RowButtonPadding = styled(Padding)`\r\n  margin: -10px;\r\n\r\n  & > button {\r\n    margin: 10px;\r\n  }\r\n`\r\n\r\nexport const Users = styled.div`\r\n\r\n`","export const USERS_ADD_ONE = 'USERS_ADD_ONE'\r\nexport const USERS_SET_CHECKED = 'USERS_SET_CHECKED'\r\nexport const USERS_DELETE_CHECKED = 'USERS_DELETE_CHECKED'\r\n\r\n\r\nexport const usersAddOne = (payload: User): { type: typeof USERS_ADD_ONE; payload: User } => ({\r\n  type: USERS_ADD_ONE,\r\n  payload,\r\n})\r\n\r\nexport const usersSetChecked = (\r\n  payload: { id: string, checked: boolean }\r\n): { type: typeof USERS_SET_CHECKED; payload: { id: string, checked: boolean } } => ({ type: USERS_SET_CHECKED, payload })\r\n\r\nexport const usersDeleteChecked = (): { type: typeof USERS_DELETE_CHECKED } => ({\r\n  type: USERS_DELETE_CHECKED,\r\n})\r\n\r\n// For Saga\r\nexport const USERS_GET_ONE = 'USERS_GET_ONE'\r\nexport const usersGetOne = (payload: number): { type: typeof USERS_GET_ONE, payload: number } => ({ type: USERS_GET_ONE, payload })\r\n// For Saga emd\r\n\r\n","import { FC, MouseEventHandler } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Checkbox } from '@material-ui/core'\r\n\r\ninterface props {\r\n  checked: boolean\r\n  name: string\r\n  checkboxHandler: MouseEventHandler<HTMLButtonElement>\r\n}\r\n\r\nconst User = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Name = styled.p`\r\n  font-size: 16px;\r\n  padding-top: 9px;\r\n  padding-bottom: 9px;\r\n`\r\n\r\nconst UserComponent: FC<props> = ({ checked, name, checkboxHandler }) => {\r\n  return (\r\n    <>\r\n      <User>\r\n        <Checkbox checked={checked} onClick={checkboxHandler} />\r\n        <Name>{name}</Name>\r\n      </User>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserComponent\r\n","export const NOTISTACk_PUSH = 'NOTISTACk_PUSH'\r\nexport const NOTISTACk_REMOVE = 'NOTISTACk_REMOVE'\r\nexport const NOTISTACk_REMOVE_FIRST = 'NOTISTACk_REMOVE_FIRST'\r\n\r\nexport const notistackPush = (payload: Notistack): { type: typeof NOTISTACk_PUSH; payload: Notistack } => ({\r\n  type: NOTISTACk_PUSH,\r\n  payload,\r\n})\r\n\r\nexport const notistackRemove = (payload: string): { type: typeof NOTISTACk_REMOVE; payload: string } => ({\r\n  type: NOTISTACk_REMOVE,\r\n  payload,\r\n})\r\n\r\nexport const notistackRemoveFirst = (): { type: typeof NOTISTACk_REMOVE_FIRST } => ({\r\n  type: NOTISTACk_REMOVE_FIRST\r\n})\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSnackbar } from 'notistack'\r\n\r\n// import { notistackRemoveFirst } from './actions'\r\nimport { notistackRemove } from './actions'\r\n\r\n// v1 not worked\r\n\r\n// const Notifier = () => {\r\n//   const dispatch = useDispatch()\r\n//   const notifications = useSelector((store: RootState) => store.notistack.notifications)\r\n//   const { enqueueSnackbar } = useSnackbar()\r\n\r\n//   useEffect(() => {\r\n//     for (const { message, key } of notifications) {\r\n//       enqueueSnackbar(message, {\r\n//         key,\r\n//         autoHideDuration: 1000,\r\n//         // @ts-ignore\r\n//         onExited: (e, onExitedKey) => {\r\n//           dispatch(notistackRemove(onExitedKey as string))\r\n//         },\r\n//       })\r\n//     }\r\n//   }, [notifications])\r\n\r\n//   return null\r\n// }\r\n\r\n// v1 end\r\n\r\n// v2 not worked\r\n\r\n// const Notifier = () => {\r\n//   const dispatch = useDispatch()\r\n//   const notifications = useSelector((store: RootState) => store.notistack.notifications)\r\n//   const { enqueueSnackbar } = useSnackbar()\r\n\r\n//   useEffect(() => {\r\n//       if (notifications.length === 0) return\r\n//       const { message, key } = notifications[0]!;\r\n//       enqueueSnackbar(message, {\r\n//         key,\r\n//         autoHideDuration: 3000,\r\n//       })\r\n//       dispatch(notistackRemoveFirst())\r\n//   }, [notifications])\r\n\r\n//   return null\r\n// }\r\n\r\n// v2 end\r\n\r\n// v3 not worked\r\n\r\n// const Notifier = () => {\r\n//   const dispatch = useDispatch()\r\n//   const notifications = useSelector((store: RootState) => store.notistack.notifications)\r\n//   const { enqueueSnackbar } = useSnackbar()\r\n\r\n//   useEffect(() => {\r\n//     for (const { message, key } of notifications) {\r\n//       enqueueSnackbar(message, {\r\n//         key,\r\n//         autoHideDuration: 2000,\r\n//         // persist: true,\r\n//       })\r\n//       dispatch(notistackRemove(key))\r\n//     }\r\n//   }, [notifications])\r\n\r\n//   return null\r\n// }\r\n\r\n// v3 end\r\n\r\n// v4 not worked\r\n\r\n// let displayed: string[] = []\r\n\r\n// const Notifier = () => {\r\n//   const dispatch = useDispatch()\r\n//   const notifications = useSelector((store: RootState) => store.notistack.notifications)\r\n//   const { enqueueSnackbar} = useSnackbar()\r\n\r\n//   const storeDisplayed = (key: string) => {\r\n//     displayed = [...displayed, key]\r\n//   }\r\n\r\n//   const removeDisplayed = (thisKey: string) => {\r\n//     displayed = [...displayed.filter((key) => key !== thisKey)];\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     for (const { message, key } of notifications) {\r\n//       // do nothing if snackbar is already displayed\r\n//       if (displayed.includes(key)) return\r\n\r\n//       // display snackbar using notistack\r\n//       enqueueSnackbar(message, {\r\n//         key,\r\n//         autoHideDuration: 2000,\r\n//         // @ts-ignore\r\n//         onExited: (e, onExitedKey) => {\r\n//           dispatch(notistackRemove(onExitedKey as string))\r\n//           removeDisplayed(onExitedKey as string)\r\n//         },\r\n//       })\r\n\r\n//       // keep track of snackbars that we've displayed\r\n//       storeDisplayed(key)\r\n//     }\r\n//   }, [notifications, enqueueSnackbar, dispatch])\r\n\r\n//   return null\r\n// }\r\n\r\n// v4 end\r\n\r\nconst Notifier = () => {\r\n  const dispatch = useDispatch()\r\n  const notifications = useSelector((store: RootState) => store.notistack.notifications)\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n\r\n  useEffect(() => {\r\n    for (const { message, key, variant } of notifications) {\r\n      enqueueSnackbar(message, {\r\n        key,\r\n        autoHideDuration: 1500,\r\n        variant,\r\n        // @ts-ignore\r\n        onClose: (e, onExitedKey) => {\r\n          closeSnackbar(onExitedKey)\r\n        },\r\n      })\r\n      dispatch(notistackRemove(key))\r\n    }\r\n  }, [notifications, enqueueSnackbar, closeSnackbar, dispatch])\r\n\r\n  return null\r\n}\r\n\r\nexport default Notifier\r\n","import HomePage from './pages/index'\r\ninterface route {\r\n  basepath: string\r\n  Component: () => JSX.Element\r\n}\r\n\r\nexport const routes: route[] = [\r\n  { basepath: '/', Component: HomePage }\r\n]\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  DialogContent,\r\n  TextField,\r\n} from '@material-ui/core'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { RowButtonPadding, Row } from './styles'\r\nimport { usersAddOne, usersSetChecked, usersDeleteChecked, usersGetOne } from '../store/users/actions'\r\nimport User from '../components/user'\r\nimport Notifier from '../store/notistack/notifier'\r\n\r\nconst Component = () => {\r\n  const dispatch: AppDispatch = useDispatch()\r\n  const users = useSelector((state: RootState) => state.users.users)\r\n  const checkedUsers = useSelector((state: RootState) => state.users.checkedUsers)\r\n\r\n  const setUserChecked = (payload: { id: string; checked: boolean }) => {\r\n    dispatch(usersSetChecked(payload))\r\n  }\r\n\r\n  const deleteCheckedUsers = () => {\r\n    dispatch(usersDeleteChecked())\r\n  }\r\n\r\n  const getOneUser = () => {\r\n    dispatch(usersGetOne(1))\r\n  }\r\n\r\n  const getOneUserWithError = () => {\r\n    dispatch(usersGetOne(1.123123))\r\n  }\r\n\r\n  // Add Dialog\r\n  const [isAddDialog, setIsAddDialog] = useState(false)\r\n  const [inputValue, setInputValue] = useState('')\r\n  const addUser = () => {\r\n    if (inputValue === '') return\r\n    const user: User = {\r\n      name: inputValue,\r\n      id: Date.now().toString(),\r\n      checked: false,\r\n    }\r\n\r\n    setInputValue('')\r\n    dispatch(usersAddOne(user))\r\n  }\r\n\r\n  const openAddFormDialog = () => {\r\n    setIsAddDialog(true)\r\n  }\r\n\r\n  const closeAddFormDialog = () => {\r\n    setIsAddDialog(false)\r\n  }\r\n\r\n  const addDialogTextField = (e: any) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const okAddDialogBtn = () => {\r\n    closeAddFormDialog()\r\n    addUser()\r\n  }\r\n\r\n  const addDialogEnterPressed = (e: any) => {\r\n    if (e.key !== 'Enter') return\r\n    closeAddFormDialog()\r\n    addUser()\r\n  }\r\n  // Add Dialog end\r\n\r\n  // Delete Dialog\r\n  const [isDeleteDialog, setIsDeleteDialog] = useState(false)\r\n\r\n  const openDeleteFormDialog = () => {\r\n    if (checkedUsers === 0) return\r\n    setIsDeleteDialog(true)\r\n  }\r\n\r\n  const closeDeleteFormDialog = () => {\r\n    setIsDeleteDialog(false)\r\n  }\r\n\r\n  const okDeleteFormDialog = () => {\r\n    closeDeleteFormDialog()\r\n    deleteCheckedUsers()\r\n  }\r\n  // Delete Dialog end\r\n\r\n  return (\r\n    <>\r\n      <Notifier/>\r\n      <Row>\r\n        <RowButtonPadding>\r\n          <Button variant='contained' color='primary' onClick={openAddFormDialog}>\r\n            Добавить\r\n          </Button>\r\n          <Button variant='contained' color='secondary' onClick={openDeleteFormDialog} disabled={checkedUsers === 0}>\r\n            Удалить\r\n          </Button>\r\n          <Button variant='contained' onClick={getOneUser}>Graphql работающий</Button>\r\n          <Button variant='contained' onClick={getOneUserWithError}>Graphql с ошибкой</Button>\r\n        </RowButtonPadding>\r\n      </Row>\r\n\r\n      <Dialog open={isAddDialog} onEscapeKeyDown={closeAddFormDialog}>\r\n        <DialogTitle>Добавить в список</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            fullWidth\r\n            onChange={addDialogTextField}\r\n            onKeyPress={addDialogEnterPressed}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant='contained' onClick={closeAddFormDialog}>\r\n            Отмена\r\n          </Button>\r\n          <Button variant='contained' color='primary' onClick={okAddDialogBtn}>\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={isDeleteDialog} onEscapeKeyDown={closeDeleteFormDialog}>\r\n        <DialogTitle>Удалить из списка {checkedUsers} пользователя?</DialogTitle>\r\n        <DialogActions>\r\n          <Button variant='contained' onClick={closeDeleteFormDialog}>\r\n            Отмена\r\n          </Button>\r\n          <Button variant='contained' color='primary' onClick={okDeleteFormDialog}>\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <div>\r\n        {users.map((user) => (\r\n          <User\r\n            key={user.id}\r\n            name={user.name}\r\n            checked={user.checked}\r\n            checkboxHandler={() => {\r\n              setUserChecked({ id: user.id, checked: user.checked })\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Component\r\n","import { Route, Switch, BrowserRouter } from 'react-router-dom'\r\nimport { routes } from './app-routes'\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        {routes.map(({ basepath, Component }) => {\r\n          return (\r\n            <Route key={basepath} path={basepath}>\r\n              <BrowserRouter basename={basepath}>\r\n                <Component />\r\n              </BrowserRouter>\r\n            </Route>\r\n          )\r\n        })}\r\n      </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { USERS_ADD_ONE, USERS_DELETE_CHECKED, USERS_SET_CHECKED } from './actions'\r\nimport { usersActions } from './actions.interfaces'\r\n\r\nconst defaultState: {\r\n   users: User[],\r\n   checkedUsers: number,\r\n } = {\r\n  users: [],\r\n  checkedUsers: 0,\r\n}\r\n\r\nexport function usersReducers(state = defaultState, action: usersActions) {\r\n  switch (action.type) {\r\n    case USERS_ADD_ONE:\r\n      return { ...state, users: [...state.users, action.payload] }\r\n    case USERS_SET_CHECKED:\r\n      return {\r\n        ...state,\r\n        users: [\r\n          ...state.users.map((user) => {\r\n            if (user.id === action.payload.id) {\r\n              return { ...user, checked: !user.checked }\r\n            }\r\n            return user\r\n          }),\r\n        ],\r\n        checkedUsers: !action.payload.checked ? state.checkedUsers + 1 : state.checkedUsers - 1,\r\n      }\r\n    case USERS_DELETE_CHECKED:\r\n      return { ...state, users: state.users.filter((user) => !user.checked), checkedUsers: 0 }\r\n  }\r\n  return state\r\n}\r\n\r\n\r\n","import { NOTISTACk_PUSH, NOTISTACk_REMOVE, NOTISTACk_REMOVE_FIRST } from './actions'\r\nimport { usersActions } from './actions.interfaces'\r\n\r\nconst defaultState: { notifications: Notistack[] } = {\r\n  notifications: []\r\n}\r\n\r\nexport const notistackReducers = (state = defaultState, action: usersActions) => {\r\n  switch (action.type) {\r\n    case NOTISTACk_PUSH:\r\n      return { ...state, notifications: [...state.notifications, action.payload] }\r\n    case NOTISTACk_REMOVE:\r\n      return { ...state, notifications: [...state.notifications.filter((note) => note.key !== action.payload)] }\r\n    case NOTISTACk_REMOVE_FIRST:\r\n      // @ts-ignore\r\n      return { ...state, notifications: [...state.notifications.filter((note, index) => index !== 0)] }\r\n  }\r\n  return state\r\n}\r\n","import { put, call, takeLeading, all } from 'redux-saga/effects'\r\n\r\nimport { USERS_GET_ONE, usersAddOne } from './actions'\r\nimport { notistackPush } from '../notistack/actions'\r\n\r\nconst apiGetOneUser = (id: number) =>\r\n  fetch('https://graphqlzero.almansi.me/api', {\r\n    method: 'POST',\r\n    headers: { 'content-type': 'application/json' },\r\n    body: JSON.stringify({\r\n      query: `query ($id: ID!) {\r\n        user(id: $id) {\r\n          id\r\n          name\r\n        }\r\n      }`,\r\n      variables: { id },\r\n    }),\r\n  })\r\n\r\nexport function* usersGetOneWorker(action: any) {\r\n  try {\r\n    const data: Response = yield call(apiGetOneUser, action.payload)\r\n    const json: { data: { user: { id: string; name: string } } } = yield call(() =>\r\n      Promise.resolve(data.json())\r\n    )\r\n    const parsed = json.data.user\r\n    const user: User = {\r\n      id: parsed.id + Date.now().toString(),\r\n      name: `${parsed.name} ${Math.floor(Math.random() * 1000)}`,\r\n      checked: false,\r\n    }\r\n    yield all([\r\n      put(usersAddOne(user)),\r\n      put(notistackPush({ key: `${user.id} ${Date.now.toString()}`, variant: 'success', message: `User ${user.name} added` })),\r\n    ])\r\n  } catch (e) {\r\n    yield put(notistackPush({ key: Date.now.toString(), variant: 'error', message: `Error ${e}` }))\r\n  }\r\n}\r\n\r\nexport function* usersWatcher() {\r\n  yield takeLeading(USERS_GET_ONE, usersGetOneWorker)\r\n}\r\n","import { all } from 'redux-saga/effects'\r\n\r\nimport { usersWatcher } from './users/saga'\r\n\r\nexport function* rootWatcher() {\r\n  yield all([usersWatcher()])\r\n}","import { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { usersReducers } from './users/reducers'\r\nimport { notistackReducers } from './notistack/reducer'\r\nimport { rootWatcher } from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst rootReducer = combineReducers({\r\n  users: usersReducers,\r\n  notistack: notistackReducers,\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)))\r\n\r\nsagaMiddleware.run(rootWatcher)\r\n","// import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Router } from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\nimport './styles/normalize.css'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './store/redux'\r\nimport { SnackbarProvider } from 'notistack'\r\n\r\nconst history = createBrowserHistory()\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router history={history}>\r\n        <SnackbarProvider maxSnack={3}>\r\n          <App />\r\n        </SnackbarProvider>\r\n      </Router>\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}